version: '3.8'

services:

# Redis
    redis:
        image: redis:7-alpine
        hostname: redis
        ports:
          - "6379:6379"
        volumes:
          - redis_data:/data
        
        networks:
            - app_network
        healthcheck:
          test: ["CMD", "redis-cli", "ping"]
          interval: 5s
          timeout: 3s
          retries: 3
        deploy:
          resources:
            limits:
              cpus: '0.50'
              memory: 256M

# RabbitMQ
    rabbitmq:
        image: rabbitmq:3-management-alpine
        ports:
            - "5672:5672"
            - "15672:15672"
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        environment:
            - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit memory_high_watermark 0.6 vm_memory_calculation_strategy rss
        networks:
            - app_network
        healthcheck:
          test: ["CMD", "rabbitmq-diagnostics", "check_running"]
          interval: 10s
          timeout: 5s
          retries: 3
        deploy:
          resources:
            limits:
              cpus: '0.75'
              memory: 512M

# Celery worker
    worker:
        build:
            context: .
            dockerfile: Dockerfile
        command: ./run_celery.sh
        volumes:
            - .:/code:Z
        env_file:
            - .env.dev
        environment:
            - REDIS_URL=redis://redis:6379/1
            - DJANGO_SETTINGS_MODULE=myshop.settings
            - CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP=True
        networks:
            - app_network
        depends_on:
            rabbitmq:
                condition: service_healthy
            redis:
                condition: service_healthy
        deploy:
          resources:
            limits:
              cpus: '0.75'
              memory: 1G

# Django
    web:
        build:
            context: .
            dockerfile: Dockerfile
        command: ./run_web.sh
        volumes:
            - .:/code:Z
            - static_volume:/code/static
            - media_volume:/code/media
        env_file:
            - .env.dev
        networks:
            - app_network
        depends_on:
            rabbitmq:
                condition: service_healthy
            redis:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
            interval: 30s
            timeout: 10s
            retries: 3
        deploy:
          resources:
            limits:
              cpus: '1.0'
              memory: 1G

    # Nginx
    nginx:
        image: nginx:1.25-alpine
        ports:
            - "80:80"
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf:ro
            - static_volume:/code/static
            - media_volume:/code/media
        depends_on:
            web:
                condition: service_healthy
        networks:
            - app_network
        deploy:
          resources:
            limits:
              cpus: '0.50'
              memory: 256M

    db:
        image: postgres:15
        hostname: db
        volumes:
            - postgres_data:/var/lib/postgresql/data/
        environment:
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=postgres
            - POSTGRES_DB=postgres
        networks:
            - app_network
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 5s
            timeout: 5s
            retries: 5
        deploy:
            resources:
                limits:
                    cpus: '1.0'
                    memory: 1G

volumes:
  redis_data:
  rabbitmq_data:
  postgres_data:
  static_volume:
  media_volume:

secrets:
  rabbitmq_user:
    file: ./secrets/rabbitmq_user.txt
  rabbitmq_pass:
    file: ./secrets/rabbitmq_pass.txt

networks:
    app_network:
        driver: bridge