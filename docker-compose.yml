version: '3.8'

services:

# Redis
    redis:
        image: redis:7-alpine
        hostname: redis
        ports:
          - "6379:6379"
        volumes:
          - redis_data:/data
        
        networks:
            - app_network
        healthcheck:
          test: ["CMD", "redis-cli", "ping"]
          interval: 5s
          timeout: 3s
          retries: 3
        deploy:
          resources:
            limits:
              cpus: '0.50'
              memory: 256M

# RabbitMQ
    rabbitmq:
        image: rabbitmq:3-management-alpine
        ports:
            - "5672:5672"
            - "15672:15672"
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        environment:
            - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit memory_high_watermark 0.6 vm_memory_calculation_strategy rss
        networks:
            - app_network
        healthcheck:
          test: ["CMD", "rabbitmq-diagnostics", "check_running"]
          interval: 10s
          timeout: 5s
          retries: 3
        deploy:
          resources:
            limits:
              cpus: '0.75'
              memory: 512M

# Celery worker
    worker:
        build:
            context: .
            dockerfile: Dockerfile
        command: ./run_celery.sh
        volumes:
            - .:/code:Z
        env_file:
            - .env.dev
        environment:
            - REDIS_HOST=redis
            - REDIS_PORT=6379
            - REDIS_DB=1
            - REDIS_URL=redis://redis:6379/1
            - DJANGO_SETTINGS_MODULE=myshop.settings
            - CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP=True
        networks:
            - app_network
        depends_on:
            rabbitmq:
                condition: service_healthy
            redis:
                condition: service_healthy
        deploy:
          resources:
            limits:
              cpus: '0.75'
              memory: 1G

# Django
    web:
        build:
            context: .
            dockerfile: Dockerfile
        command: ./run_web.sh
        volumes:
            - .:/code:Z
        ports:
            - "8000:8000"
        env_file:
            - .env.dev
        
        networks:
            - app_network
        depends_on:
            rabbitmq:
                condition: service_healthy
            redis:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
            interval: 30s
            timeout: 10s
            retries: 3
        deploy:
          resources:
            limits:
              cpus: '1.0'
              memory: 1G
        

    # web2:
    #     build:
    #         context: .
    #         dockerfile: Dockerfile
    #     command: ./run_web.sh
    #     volumes:
    #         - .:/code:Z
    #     ports:
    #         - "8002:8000"
    #     env_file:
    #         - .env.dev
    #     depends_on:
    #         rabbitmq:
    #             condition: service_healthy
    #         redis:
    #             condition: service_healthy
    #         web:
    #             condition: service_healthy
    #     healthcheck:
    #         test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
    #         interval: 30s
    #         timeout: 10s
    #         retries: 3
    #     deploy:
    #       resources:
    #         limits:
    #           cpus: '1.0'
    #           memory: 1G

    db:
        image: postgres:15
        volumes:
        - postgres_data:/var/lib/postgresql/data/
        environment:
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=postgres
            - POSTGRES_DB=postgres

     # Nginx Load Balancer
    # nginx:
    #     image: nginx:alpine
    #     command: ["./run_wait-for-web.sh", "nginx", "-g", "daemon off;"]
    #     volumes:
    #       - ./nginx.conf:/etc/nginx/nginx.conf:ro
    #       - ./run_wait-for-web.sh:/run_wait-for-web.sh:ro
    #     ports:
    #         - "80:80"
    #     depends_on:
    #         web:
    #             condition: service_healthy
    #     networks:
    #         - app_network
    #     deploy:
    #         resources:
    #             limits:
    #                 cpus: '0.5'
    #                 memory: 256M

volumes:
  redis_data:
  rabbitmq_data:
  postgres_data:

secrets:
  rabbitmq_user:
    file: ./secrets/rabbitmq_user.txt
  rabbitmq_pass:
    file: ./secrets/rabbitmq_pass.txt

networks:
    app_network:
        driver: bridge